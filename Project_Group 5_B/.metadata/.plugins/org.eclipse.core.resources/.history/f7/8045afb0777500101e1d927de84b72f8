package com.orderservice.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import jakarta.validation.Valid;
import org.springframework.web.client.RestTemplate;
import org.springframework.http.ResponseEntity;

import com.orderservice.model.Order;
import com.orderservice.repo.OrderRepository;

import java.util.Map;

@Controller
public class OrderController {
	@Autowired private OrderRepository repo;
	  @Autowired private RestTemplate restTemplate;

	  // Equivalent of GET /dept -> add-dept.html
	  @GetMapping("/order")
	  public String orderForm(Order order) { // model attribute 'order' will be bound
	    return "add-order";
	  }

	  // POST /add (like /add dept)
	  @PostMapping("/add")
	  public String add(@Valid Order order, BindingResult result, Model model) {
	    if (result.hasErrors()) return "add-order";
	    order.setStatus("SENT_TO_MARKET");
	    repo.save(order);

	    // Forward to market-service
	    var payload = Map.of("username", order.getUsername(), "symbol", order.getSymbol(), "quantity", order.getQuantity());
	    try {
	      ResponseEntity<Map> resp = restTemplate.postForEntity("http://market-service/api/market/place", payload, Map.class);
	      if (resp.getStatusCode().is2xxSuccessful()) order.setStatus("EXECUTED");
	      else order.setStatus("FAILED");
	    } catch (Exception ex) {
	      order.setStatus("FAILED - MARKET_ERROR");
	    }
	    repo.save(order);
	    model.addAttribute("orders", repo.findAll());
	    return "index";
	  }

	  @GetMapping("/")
	  public String index(Model model) {
	    model.addAttribute("orders", repo.findAll());
	    return "index";
	  }

	  @GetMapping("/edit/{id}")
	  public String edit(@PathVariable("id") String id, Model model) {
	    Order order = repo.findById(id).orElseThrow(() -> new IllegalArgumentException("Invalid Order Id:" + id));
	    model.addAttribute("order", order);
	    return "update-order";
	  }

	  @PostMapping("/update/{id}")
	  public String update(@PathVariable("id") String id, @Valid Order order, BindingResult result, Model model) {
	    if (result.hasErrors()) {
	      order.setId(id);
	      return "update-order";
	    }
	    repo.save(order);
	    model.addAttribute("orders", repo.findAll());
	    return "index";
	  }

	  @GetMapping("/delete/{id}")
	  public String delete(@PathVariable("id") String id, Model model) {
	    Order order = repo.findById(id).orElseThrow(() -> new IllegalArgumentException("Invalid Order Id:" + id));
	    repo.delete(order);
	    model.addAttribute("orders", repo.findAll());
	    return "index";
	  }

}
